# Script para criar tabelas diretamente no MySQL
import pymysql
import sys
from datetime import date

def criar_tabelas_mysql():
    """Criar tabelas diretamente no MySQL"""
    try:
        print("üîß Criando tabelas no banco escola_db...")
        
        # Conectar ao MySQL
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='',
            database='escola_db',
            charset='utf8mb4'
        )
        
        cursor = connection.cursor()
        
        # SQL para criar tabela turmas
        sql_turmas = """
        CREATE TABLE IF NOT EXISTS turmas (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nome VARCHAR(100) NOT NULL UNIQUE,
            capacidade INT NOT NULL,
            INDEX idx_turma_nome (nome)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
        """
        
        # SQL para criar tabela alunos
        sql_alunos = """
        CREATE TABLE IF NOT EXISTS alunos (
            id INT AUTO_INCREMENT PRIMARY KEY,
            nome VARCHAR(80) NOT NULL,
            data_nascimento DATE NOT NULL,
            email VARCHAR(120) UNIQUE NULL,
            status VARCHAR(20) NOT NULL DEFAULT 'inativo',
            turma_id INT NULL,
            INDEX idx_aluno_nome (nome),
            INDEX idx_aluno_email (email),
            INDEX idx_aluno_status (status),
            FOREIGN KEY (turma_id) REFERENCES turmas(id) ON DELETE SET NULL
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
        """
        
        # Executar comandos
        print("üìö Criando tabela turmas...")
        cursor.execute(sql_turmas)
        
        print("üë• Criando tabela alunos...")
        cursor.execute(sql_alunos)
        
        connection.commit()
        print("‚úÖ Tabelas criadas com sucesso!")
        
        # Verificar tabelas criadas
        cursor.execute("SHOW TABLES")
        tabelas = [tabela[0] for tabela in cursor.fetchall()]
        print(f"üìã Tabelas existentes: {tabelas}")
        
        cursor.close()
        connection.close()
        return True
        
    except pymysql.Error as e:
        print(f"‚ùå Erro MySQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False

def popular_dados():
    """Popular tabelas com dados de exemplo"""
    try:
        print("\nüå± Populando banco com dados de exemplo...")
        
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='',
            database='escola_db',
            charset='utf8mb4'
        )
        
        cursor = connection.cursor()
        
        # Verificar se j√° tem dados
        cursor.execute("SELECT COUNT(*) FROM turmas")
        turmas_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM alunos") 
        alunos_count = cursor.fetchone()[0]
        
        if turmas_count > 0 or alunos_count > 0:
            print(f"‚ö†Ô∏è J√° existem {turmas_count} turmas e {alunos_count} alunos")
            resposta = input("Deseja continuar mesmo assim? (s/n): ")
            if resposta.lower() not in ['s', 'sim', 'y', 'yes']:
                print("‚ùå Opera√ß√£o cancelada")
                return False
        
        # Inserir turmas
        print("üìö Inserindo turmas...")
        turmas = [
            ("1¬∫ Ano A", 30),
            ("1¬∫ Ano B", 28),
            ("1¬∫ Ano C", 25),
            ("2¬∫ Ano A", 30),
            ("2¬∫ Ano B", 27),
            ("2¬∫ Ano C", 29),
            ("3¬∫ Ano A", 25),
            ("3¬∫ Ano B", 24),
            ("3¬∫ Ano C", 26),
            ("Turma Especial", 15)
        ]
        
        sql_insert_turma = "INSERT IGNORE INTO turmas (nome, capacidade) VALUES (%s, %s)"
        for turma in turmas:
            cursor.execute(sql_insert_turma, turma)
            print(f"  ‚úÖ Turma: {turma[0]}")
        
        # Inserir alunos
        print("üë• Inserindo alunos...")
        alunos = [
            ("Ana Carolina Silva Santos", "2008-03-15", "ana.silva@email.com", "ativo", 1),
            ("Bruno Eduardo Oliveira Costa", "2007-07-22", "bruno.oliveira@email.com", "ativo", 1),
            ("Camila Beatriz Lima Ferreira", "2009-01-10", "camila.lima@email.com", "ativo", 2),
            ("Diego Fernando Santos Rocha", "2008-11-05", "diego.santos@email.com", "ativo", 2),
            ("Eduarda Cristina Mendes Alves", "2007-09-18", "eduarda.mendes@email.com", "ativo", 3),
            ("Felipe Gabriel Costa Pereira", "2008-04-08", "felipe.costa@email.com", "ativo", 3),
            ("Gabriela Maria Rodrigues Lima", "2009-06-12", "gabriela.rodrigues@email.com", "ativo", 4),
            ("Henrique Jos√© Fernandes Silva", "2007-02-28", "henrique.fernandes@email.com", "ativo", 4),
            ("Isabella Sophia Martins Souza", "2008-08-14", "isabella.martins@email.com", "ativo", 5),
            ("Jo√£o Pedro Ara√∫jo Barbosa", "2007-12-03", "joao.araujo@email.com", "ativo", 5),
            ("Larissa Vit√≥ria Gomes Castro", "2009-05-20", "larissa.gomes@email.com", "ativo", 6),
            ("Matheus Alexandre Dias Moreira", "2008-10-16", "matheus.dias@email.com", "ativo", 6),
            ("Nat√°lia Fernanda Cardoso Ribeiro", "2007-01-25", "natalia.cardoso@email.com", "ativo", 7),
            ("Ot√°vio Rafael Correia Nunes", "2008-07-09", "otavio.correia@email.com", "ativo", 7),
            ("Priscila Amanda Teixeira Monteiro", "2009-03-07", "priscila.teixeira@email.com", "ativo", 8),
            ("Rafael Leonardo Vieira Campos", "2007-11-21", "rafael.vieira@email.com", "ativo", 8),
            ("Sofia Helena Nascimento Freitas", "2008-09-04", "sofia.nascimento@email.com", "ativo", 9),
            ("Thiago Gustavo Ramos Machado", "2007-04-17", "thiago.ramos@email.com", "ativo", 9),
            ("Valentina J√∫lia Carvalho Lopes", "2009-08-30", "valentina.carvalho@email.com", "ativo", 10),
            ("Wellington Victor Melo Torres", "2008-02-11", "wellington.melo@email.com", "ativo", 10),
            ("Xavier Ant√¥nio Pinto Duarte", "2007-06-19", "xavier.pinto@email.com", "inativo", None),
            ("Yasmin Beatriz Moura Santana", "2008-12-08", "yasmin.moura@email.com", "inativo", None),
            ("Zacarias Miguel Cunha Barros", "2009-04-26", "zacarias.cunha@email.com", "inativo", None),
            ("Ana Luiza de Souza e Silva", "2008-05-14", None, "ativo", 1),
            ("Jos√© Carlos dos Santos Junior", "2007-10-23", None, "ativo", 2)
        ]
        
        sql_insert_aluno = """
        INSERT IGNORE INTO alunos (nome, data_nascimento, email, status, turma_id) 
        VALUES (%s, %s, %s, %s, %s)
        """
        
        for aluno in alunos:
            cursor.execute(sql_insert_aluno, aluno)
            turma_info = f" (Turma {aluno[4]})" if aluno[4] else " (Sem turma)"
            print(f"  ‚úÖ Aluno: {aluno[0]}{turma_info}")
        
        connection.commit()
        
        # Estat√≠sticas finais
        cursor.execute("SELECT COUNT(*) FROM turmas")
        total_turmas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM alunos")
        total_alunos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM alunos WHERE status = 'ativo'")
        alunos_ativos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM alunos WHERE status = 'inativo'")
        alunos_inativos = cursor.fetchone()[0]
        
        print(f"\nüìä ESTAT√çSTICAS:")
        print(f"   üìö Total de turmas: {total_turmas}")
        print(f"   üë• Total de alunos: {total_alunos}")
        print(f"   ‚úÖ Alunos ativos: {alunos_ativos}")
        print(f"   ‚ùå Alunos inativos: {alunos_inativos}")
        
        cursor.close()
        connection.close()
        
        print("\nüéâ Banco populado com sucesso!")
        return True
        
    except pymysql.Error as e:
        print(f"‚ùå Erro MySQL: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False

def menu():
    """Menu principal"""
    while True:
        print("\n" + "="*50)
        print("üè´ CONFIGURA√á√ÉO DO BANCO ESCOLA")
        print("="*50)
        print("1. üîß Criar tabelas")
        print("2. üå± Popular com dados de exemplo")
        print("3. üîÑ Criar tabelas + Popular")
        print("4. üìä Ver estat√≠sticas")
        print("5. ‚ùå Sair")
        print("="*50)
        
        opcao = input("Escolha uma op√ß√£o (1-5): ").strip()
        
        if opcao == "1":
            criar_tabelas_mysql()
        elif opcao == "2":
            popular_dados()
        elif opcao == "3":
            if criar_tabelas_mysql():
                popular_dados()
        elif opcao == "4":
            ver_estatisticas()
        elif opcao == "5":
            print("üëã Tchau!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

def ver_estatisticas():
    """Ver estat√≠sticas do banco"""
    try:
        connection = pymysql.connect(
            host='localhost',
            port=3306,
            user='root',
            password='',
            database='escola_db',
            charset='utf8mb4'
        )
        
        cursor = connection.cursor()
        
        # Estat√≠sticas gerais
        cursor.execute("SELECT COUNT(*) FROM turmas")
        total_turmas = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM alunos")
        total_alunos = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM alunos WHERE status = 'ativo'")
        alunos_ativos = cursor.fetchone()[0]
        
        print(f"\nüìä ESTAT√çSTICAS GERAIS:")
        print(f"üìö Turmas: {total_turmas}")
        print(f"üë• Alunos: {total_alunos}")
        print(f"‚úÖ Ativos: {alunos_ativos}")
        
        # Ocupa√ß√£o por turma
        cursor.execute("""
            SELECT t.nome, t.capacidade, COUNT(a.id) as ocupacao
            FROM turmas t
            LEFT JOIN alunos a ON t.id = a.turma_id
            GROUP BY t.id, t.nome, t.capacidade
            ORDER BY t.nome
        """)
        
        print(f"\nüìã OCUPA√á√ÉO POR TURMA:")
        for turma in cursor.fetchall():
            nome, capacidade, ocupacao = turma
            percentual = (ocupacao / capacidade) * 100 if capacidade > 0 else 0
            print(f"   {nome}: {ocupacao}/{capacidade} ({percentual:.1f}%)")
        
        cursor.close()
        connection.close()
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")

if __name__ == "__main__":
    menu()
